#summary A Fuzzy Logic Control Library and Application in C++
Last updated: 01/June/2013

== Donations ==
Please, consider making a *donation* to support these projects.
There are still _many_ things to do!

<div style="text-align: center;">
|| *NZD* || [http://www.fuzzylite.com/donation.php?generosity=low 1$] || [http://www.fuzzylite.com/donation.php?generosity=Low 2$] || [http://www.fuzzylite.com/donation.php?generosity=LOW 5$] || [http://www.fuzzylite.com/donation.php?generosity=medium 10$] || [http://www.fuzzylite.com/donation.php?generosity=Medium 20$] || [http://www.fuzzylite.com/donation.php?generosity=MEDIUM 50$] || [http://www.fuzzylite.com/donation.php?generosity=high 100$] || [http://www.fuzzylite.com/donation.php?generosity=High 200$] || [http://www.fuzzylite.com/donation.php?generosity=HIGH 500$] ||
|| *Generosity* ||  [http://www.fuzzylite.com/donation.php?generosity=low low ] || [http://www.fuzzylite.com/donation.php?generosity=Low Low ] || [http://www.fuzzylite.com/donation.php?generosity=LOW LOW ] || [http://www.fuzzylite.com/donation.php?generosity=medium med ] || [http://www.fuzzylite.com/donation.php?generosity=Medium Med ] || [http://www.fuzzylite.com/donation.php?generosity=MEDIUM MED ] || [http://www.fuzzylite.com/donation.php?generosity=high high ] || [http://www.fuzzylite.com/donation.php?generosity=High High ] || [http://www.fuzzylite.com/donation.php?generosity=HIGH HIGH ] || https://www.paypal.com/en_US/i/logo/PayPal_mark_37x23.gif ||
</div>

... and please, let us all give a standing ovation to the *[#Donors Donors]*.


=== News ===

30/05/2013: Join the *`fuzzylite`* !LinkedIn [http://www.linkedin.com/groups/fuzzylite-5043005?trk=myg_ugrp_ovr group]

== Current Version: 2.0 (February/2013) ==

I have rewritten *`fuzzylite`* and *`qtfuzzylite`* from the ground up, incorporating *MANY* new features, taking much more care coding, and using the experience gained over the past years. Also, I have configured a !PayPal account hoping to receive *donations* and be able to provide more maintainance and keep updating both projects much more frequently.

I do hope that you enjoy this version as much as I did working on it during my free time!

Sincerely yours,

*Juan Rada-Vilela*<br>
[mailto:jcrada@fuzzylite.com jcrada@fuzzylite.com]<br>
http://www.fuzzylite.com/jcrada  

= Introduction =

*`fuzzylite`* is a cross-platform, free open-source Fuzzy Logic Control Library written in C++. Simplicity is the essence of *`fuzzylite`*. It provides a natural and simple way of creating a fuzzy logic engine in a few steps using object-oriented programming. It allows you to easily add your own features to the library by just using inheritance. It only relies on the Standard Template Library (STL) that comes with C++, *no* other third-party library (e.g. boost) are involved. Furthermore, as a library, it only contains the functions you need from a fuzzy logic controller.

*`qtfuzzylite`* is a Graphic User Interface that uses *`fuzzylite`* to provide a nice and easy way to visually create your fuzzy logic controllers. It is cross-platform, free and open source too, and it is based on the Qt framework. It allows you to design your fuzzy logic controller and interactively play with it while observing its operation in real-time. Furthermore, it allows you to export your controller to actual *`fuzzylite`* C++ code, so you only need to copy and paste it into your C++ application and _voil√†_!

If you are going to cite this library in your article, please do so as:

Juan Rada-Vilela. fuzzylite: A fuzzy logic control library in C++, 2013. URL http://www.fuzzylite.com.

<code language="bib">
@misc{fl::fuzzylite,
author={Juan Rada-Vilela},
title={fuzzylite: A fuzzy logic control library in C++},
url={http://www.fuzzylite.com},
year={2013}
}</code>


Additionally, check the list of *[#Applications Applications]* and *[#Publications Publications]* using *`fuzzylite`*


= License =
*`fuzzylite`* is licensed under the [http://www.apache.org/licenses/LICENSE-2.0.html Apache License 2.0]

*`qtfuzzylite`* is licensed under the [http://www.gnu.org/licenses/gpl.html GNU General Public License 3.0]

= Features =
  * Linguistic terms: triangle, trapezoid, rectangle, discrete, gaussian, gaussian product, bell, pi-shape, sigmoid difference, sigmoid product, ramp, sigmoid, s-shape, z-shape, and you can create more
  * T-norms and activation operators: minimum, algebraic product, bounded difference, drastic product, einstein product, hamacher product, and you can create more
  * T-conorms and accumulation operators: maximum, algebraic sum, bounded sum, normalized sum, drastic sum, einstein sum, hamacher sum, and you can create more
  * Defuzzifiers: centroid, smallest of maximum, largest of maximum, mean of maximum, and you can create more
  * Hedges: any, not, extremely, seldom, somewhat, very, and you can create more.
  * Extend every component of *`fuzzylite`* and use it seamlessly thanks to the neat object-oriented approach 
  * Import your fuzzy engines from Octave or Matlab using the `fis` format
  * Export your *`fuzzylite`* engines to the `.fis` format and use them in Octave or Matlab
  * Import and export using the Fuzzy Controller Language (FCL) specification
  * Use multiple ruleblocks within an engine, each containing any number of (possibly weighted) rules, and different T-norms, T-conorms, and activation operators
  * Write Mamdani rules just naturally e.g. "`if Ambient is DARK then Power is HIGH`"
  * Return a default value or the last known valid one in output variables when no rules are activated
  * Play with over a dozen of examples from Octave, Matlab, and ours included in `fcl` and `fis` format, and also in *`fuzzylite`* C++
  * Easily build from sources using the CMake scripts to build *`fuzzylite`* and *`qtfuzzylite`*  in Linux, Mac, and Windows (natively using MSVC)
  * Download the binaries in the [http://http://code.google.com/p/fuzzylite/downloads/ Downloads] page for the following platforms: Ubuntu, Mac OSX and Windows


= Example =
<code language="cpp">
fl::Engine* engine = new fl::Engine("simple-dimmer");

 fl::InputVariable* ambient = new fl::InputVariable;
ambient->setName("Ambient");
ambient->setRange(0.000, 1.000);

 ambient->addTerm(new fl::Triangle("DARK", 0.000, 0.250, 0.500));
ambient->addTerm(new fl::Triangle("MEDIUM", 0.250, 0.500, 0.750));
ambient->addTerm(new fl::Triangle("BRIGHT", 0.500, 0.750, 1.000));
engine->addInputVariable(ambient);

 fl::OutputVariable* power = new fl::OutputVariable;
power->setName("Power");
power->setRange(0.000, 2.000);
power->setDefaultValue(0);

 power->addTerm(new fl::Triangle("LOW", 0.000, 0.500, 1.000));
power->addTerm(new fl::Triangle("MEDIUM", 0.500, 1.000, 1.500));
power->addTerm(new fl::Triangle("HIGH", 1.000, 1.500, 2.000));
engine->addOutputVariable(power);

 fl::RuleBlock* ruleblock = new fl::RuleBlock;
ruleblock->addRule(fl::MamdaniRule::parse("if Ambient is DARK then Power is HIGH", engine));
ruleblock->addRule(fl::MamdaniRule::parse("if Ambient is MEDIUM then Power is MEDIUM", engine));
ruleblock->addRule(fl::MamdaniRule::parse("if Ambient is BRIGHT then Power is LOW", engine));
engine->addRuleBlock(ruleblock);

 engine->configure("Minimum", "Maximum", "AlgebraicProduct", "AlgebraicSum", "Centroid");
 
 
fl::scalar range = ambient->getMaximum() - ambient->getMinimum();
for (int i = 0 ; i < 50; ++i){
    fl::scalar light = ambient->getMinimum() + i * (range / 50);
    ambient->setInput(light);
    engine->process();
    FL_LOG("Ambient.input = " << fl::Op::str(light) << " -> " << 
           "Power.output = " << fl::Op::str(power->defuzzify()));
}</code>

Watch a tutorial on *`qtfuzzylite`*:

<wiki:video url="http://www.youtube.com/watch?v=8UQghVz8N9A"/>

... and an example of *`fuzzylite-1.x`* working in real-time:

<wiki:video url="http://www.youtube.com/watch?v=YOKk8G_5aRA"/>


= What's next? =
  * Takagi-Sugeno rules
  * Documentation using Doxygen
  * R Exporters to generate the surface of each output based on the inputs
  * Develop the Adaptive Neuro-Fuzzy Inference System (ANFIS)
  * Develop the fuzzy C-means data clustering

= Known bugs =
  * The membership function of Triangle returns 0 when a=b or when b=c. This can be fixed by changing line 49 of src/term/Triangle.cpp as:
<code language="cpp">
//from:
//if (Op::isLE(x, minimum) or Op::isGE(x, maximum))
//to:
if (Op::isLt(x, minimum) or Op::isGt(x, maximum))</code>

  * Similarly, the membership function of Trapezoid returns 0 when a=b or when c=d. This can be fixed by changing the method Trapezoid::membership(scalar) in src/term/Trapezoid.cpp to:
<code language="cpp">
scalar Trapezoid::membership(scalar x) const {
    if (fl::Op::isNan(x)) return std::numeric_limits<scalar>::quiet_NaN();
    scalar minimum = _a;
    scalar maximum = _d;
    if (Op::isLt(x, minimum) or Op::isGt(x, maximum))
        return 0.0;
    else if (Op::isLE(x, _b))
        return (Op::isEq(_b, minimum)) ? 1.0 : (x - minimum) / (_b - minimum);
    else if (Op::isLE(x, _c))
        return 1.0;
    else if (Op::isLE(x, maximum))
        return (maximum - x) / (maximum - _c);
    return 0.0;
}</code>



= Building from source =
Building from source requires you to have CMake installed. Once installed, it is as easy as it gets:

  * In Unix:
<code language="sh">
  #from fuzzylite/fuzzylite:
  cmake .
  make
  sudo make install #optional

  #from fuzzylite/qtfuzzylite:
  cmake .
  make

  #if Linux:
  sudo make install #optional

  #if MacOSX, qtfuzzylite.app will be created for you</code>

  * In Windows:
<code language="sh">
  #from fuzzylite/fuzzylite:
  cmake . -G "NMake Makefiles"
  nmake

  #from fuzzylite/qtfuzzylite:
  cmake . -G "NMake Makefiles"
  nmake</code>

  The instructions above will produce the following files. `libfuzzylite.(so|dylib|dll)` which is the shared library. `libfuzzylite-static.(a|lib)` which is the static library to build stand-alone applications. `fuzzylite-demo(.exe)` an executable  of a simple console demo application using *`fuzzylite`* as a shared library. `qtfuzzylite(.app|.exe)` the graphic user interface using *`fuzzylite`* as a shared library.
  The extensions of the output files depend on the platform. Specifically, `.so|.a` in Linux, `.dylib|.a` in Mac, `.dll|.lib` in Windows. Notice that, on Windows, the libraries must be placed manually in the same folder of the executable file. Also, the library `dbghelp` is used on Windows to retrieve the backtrace in case of errors, but such a library should be included by default in your Windows distribution.

  Furthermore, the following additional building flags can be set upon executing `cmake`, either to build *`fuzzylite`* or *`qtfuzzylite`*, just remember to use the same flags in both.

  * `-DFL_DEBUG=ON` will build in Debug mode which also prints more information to console (default is `OFF`)
  * `-DFL_USE_LOG=OFF` will not log information to console (default is `ON`)
  * `-DFL_USE_FLOAT=ON` the floating-point numbers are taken as `float` instead of `double` (default is `OFF`, i.e. `double` is used)
  * `-DFL_PRECISION=x` defines `x` as the precision to which two floating-point numbers will be different (`x` defaults to `1e-5`)
  * `-DFL_DECIMALS=y`  defines `y` as the number of decimals to use when printing floating-point numbers to console and files (`y` defaults to `3`)

= Acknowledgements =
	This version was the product of using my free time to relax from my current PhD studies, for which I am earning less than minimum wage to support myself. Therefore, if you find this library useful and you do have the resources, please _seriously_ consider making a *donation* to support these projects. Thank you *very* much!

	Very important has been the feedback I have had over the past years from the community. All the suggestions and critics have really helped me to identify problems and improve the library in general. Thank you *very* much to all of you for your great support.

	Previous versions of this work were possible thanks to the Foundation for the Advancement of Soft Computing, to the Master of Soft Computing and Intelligent Data Analysis at the European Centre for Soft Computing, and especially to Sergio Guadarrama and Luis Magdalena for their support.


= Screenshots =

Ubuntu

http://fuzzylite.googlecode.com/git/webfuzzylite/ubuntu.png

Mac OSX

http://fuzzylite.googlecode.com/git/webfuzzylite/macosx.png

Windows

http://fuzzylite.googlecode.com/git/webfuzzylite/Windows.png


= Applications =

*`fuzzylite`* has been utilized in the following applications:

  # *[http://www.fuzzylite.com qtfuzzylite]*: A Fuzzy Logic Control Application in C++


If you want your application to appear in this list, please [mailto:jcrada@fuzzylite.com email] me the name of your application, URL, and a very brief summary (max. 20 words). If your application is not free, please make a donation.


= Publications =

*`fuzzylite`* has been utilized in the following publications:

  #

If you want your publication to appear in this list, please [mailto:jcrada@fuzzylite.com email] me your citation as "Authors. Publication title. Conference or Journal. Year. URL."




= Donors =

Please, let us all give a standing ovation to:

  # *[http://www.internetone.it InternetONE.it]*
  # *[http://www.xgen.com.br XGEN]*

If you wish to appear in this list, please make a donation :)
